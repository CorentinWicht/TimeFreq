%Test FmaxGND function
%AUTHOR: Eric Fields
%VERSION DATE: 14 July 2017

global test_xls_output
if isempty(test_xls_output)
    test_xls_output = true;
end

%Load a GND for testing
%Load a GND for testing
FMUT_dir = fileparts(fileparts(mfilename('fullpath')));
load(fullfile(FMUT_dir, 'testing', 'data', 'EmProb_13subs_Test.GND'), '-mat');

%Define general variables
time_wind = [500, 800];
[~, start_sample] = min(abs( GND.time_pts - time_wind(1) ));
[~, end_sample  ] = min(abs( GND.time_pts - time_wind(2) ));

%% BH method

if test_xls_output
    output_file = fullfile('outputs', 'Ffdr_test.xlsx');
else
    output_file = false;
end
GND = FfdrGND(GND, ...
              'bins',          [24, 26, 27, 29], ...
              'factor_names',  {'Probability', 'Emotion'}, ... 
              'factor_levels', [2, 2], ...
              'method',        'bh', ...
              'time_wind',     time_wind, ...
              'exclude_chans', {'centroparietal_cluster'}, ...
              'save_GND',      'no', ...
              'verblevel',     2, ...
              'output_file',   output_file, ...
              'plot_raster',   'yes');

%F==t^2
assert(all(all(GND.F_tests(end).F_obs.ProbabilityXEmotion - GND.grands_t(1:32, start_sample:end_sample, 51).^2 < 1e-4)));

%Calculate t-test on the same data
GND = tfdrGND(GND, 54, ...
              'time_wind',     time_wind, ...
              'exclude_chans', {'centroparietal_cluster'}, ...
              'method',        'bh', ...
              'save_GND',      'no', ...
              'plot_gui',      'no', ...
              'plot_raster',   'no', ...
              'verblevel',     2);

%Critical F == critical t^2
assert(GND.F_tests(end).F_crit.Emotion - GND.t_tests(end).crit_t(1)^2 < 1e-4);
%P-values are the same
assert(all(all(GND.F_tests(end).adj_pval.Emotion - GND.t_tests(end).adj_pval < 1e-4)))


%% Oneway ANOVA

if test_xls_output
    output_file = fullfile('outputs', 'Ffdr_test_oneway.xlsx');
else
    output_file = false;
end
GND = FfdrGND(GND, ...
              'bins',          [24, 26, 27], ...
              'factor_names',  {'NEU_Probability'}, ... 
              'factor_levels', 3, ...
              'method',        'bh', ...
              'time_wind',     time_wind, ...
              'exclude_chans', {'centroparietal_cluster'}, ...
              'save_GND',      'no', ...
              'verblevel',     2, ...
              'output_file',   output_file, ...
              'plot_raster',   'yes');

%% BY method

GND = FfdrGND(GND, ...
              'bins',          [24, 26, 27, 29], ...
              'factor_names',  {'Probability', 'Emotion'}, ... 
              'factor_levels', [2, 2], ...
              'method',        'by', ...
              'time_wind',     time_wind, ...
              'exclude_chans', {'centroparietal_cluster'}, ...
              'save_GND',      'no', ...
              'verblevel',     2, ...
              'plot_raster',   'no');

%F==t^2
assert(all(all(GND.F_tests(end).F_obs.ProbabilityXEmotion - GND.grands_t(1:32, start_sample:end_sample, 51).^2 < 1e-4)));

%Calculate t-test on the same data
GND = tfdrGND(GND, 54, ...
              'time_wind',     time_wind, ...
              'exclude_chans', {'centroparietal_cluster'}, ...
              'method',        'by', ...
              'save_GND',      'no', ...
              'plot_gui',      'no', ...
              'plot_raster',   'no', ...
              'verblevel',     2);

%Critical F == critical t^2
assert(GND.F_tests(end).F_crit.Emotion - GND.t_tests(end).crit_t(1)^2 < 1e-4);
%P-values are the same
assert(all(all(GND.F_tests(end).adj_pval.Emotion - GND.t_tests(end).adj_pval < 1e-4)))

%% BKY method

GND = FfdrGND(GND, ...
              'bins',          [24, 26, 27, 29], ...
              'factor_names',  {'Probability', 'Emotion'}, ... 
              'factor_levels', [2, 2], ...
              'method',        'bky', ...
              'time_wind',     time_wind, ...
              'exclude_chans', {'centroparietal_cluster'}, ...
              'save_GND',      'no', ...
              'verblevel',     2, ...
              'plot_raster',   'no');

%F==t^2
assert(all(all(GND.F_tests(end).F_obs.ProbabilityXEmotion - GND.grands_t(1:32, start_sample:end_sample, 51).^2 < 1e-4)));

%Calculate t-test on the same data
GND = tfdrGND(GND, 54, ...
              'time_wind',     time_wind, ...
              'exclude_chans', {'centroparietal_cluster'}, ...
              'method',        'bky', ...
              'save_GND',      'no', ...
              'plot_gui',      'no', ...
              'plot_raster',   'no', ...
              'verblevel',     2);

%Critical F == critical t^2
assert(GND.F_tests(end).F_crit.Emotion - GND.t_tests(end).crit_t(1)^2 < 1e-4);

%% Mean window

if test_xls_output
    output_file = fullfile('outputs', 'Ffdr_test_mean_wind.xlsx');
else
    output_file = false;
end
GND = FfdrGND(GND, ...
              'bins',          [24, 26, 27, 29], ...
              'factor_names',  {'Probability', 'Emotion'}, ... 
              'factor_levels', [2, 2], ...
              'method',        'bh', ...
              'time_wind',     time_wind, ...
              'mean_wind',     'yes', ...
              'exclude_chans', {'centroparietal_cluster'}, ...
              'save_GND',      'no', ...
              'verblevel',     2, ...
              'output_file',   output_file, ...
              'plot_raster',   'yes');



%Calculate t-test on the same data
GND = tfdrGND(GND, 54, ...
              'time_wind',     time_wind, ...
              'mean_wind',     'yes', ...
              'exclude_chans', {'centroparietal_cluster'}, ...
              'method',        'bh', ...
              'save_GND',      'no', ...
              'plot_gui',      'no', ...
              'plot_raster',   'no', ...
              'verblevel',     2);


%F==t^2
assert(all(GND.F_tests(end).F_obs.Emotion - GND.t_tests(end).data_t.^2 < 1e-9))
%Critical F == critical t^2
assert(GND.F_tests(end).F_crit.Emotion - GND.t_tests(end).crit_t(1)^2 < 1e-4);
%P-values are the same
assert(all(all(GND.F_tests(end).adj_pval.Emotion - GND.t_tests(end).adj_pval < 1e-4)))
